openapi: 3.0.0
info:
  title: ClaimBot API
  description: API documentation for the Internal Claims & Overtime Management System (ClaimBot)
  version: 1.0.0
servers:
  - url: /api
paths:
  /auth/profile:
    get:
      summary: Get User Profile
      description: Fetches the profile of the authenticated user.
      security:
        - clerk_auth: []
      responses:
        '200':
          description: User profile fetched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized. User is not authenticated.
        '404':
          description: User not found in database.
        '500':
          description: Internal Server Error.
  /users:
    get:
      summary: Get All Users
      description: Fetches a list of all users. Requires admin role.
      security:
        - clerk_auth: []
      responses:
        '200':
          description: List of users fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden. User does not have admin role.
        '500':
          description: Internal Server Error.
    post:
      summary: Create User
      description: Creates a new user in the database. Requires admin role. Intended for syncing with Clerk users.
      security:
        - clerk_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clerkId:
                  type: string
                  description: Clerk user ID.
                name:
                  type: string
                email:
                  type: string
                department:
                  type: string
                designation:
                  type: string
                role:
                  type: string
                  enum: ['staff', 'manager', 'finance', 'admin']
                salary:
                  type: number
              required:
                - clerkId
                - email
                - role
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request. Missing required fields.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict. User with Clerk ID or email already exists.
        '500':
          description: Internal Server Error.
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: MongoDB User ID
    get:
      summary: Get User by ID
      description: Fetches a single user by their MongoDB ID. Requires admin role.
      security:
        - clerk_auth: []
      responses:
        '200':
          description: User fetched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request. Invalid ID format.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: User not found.
        '500':
          description: Internal Server Error.
    patch:
      summary: Update User by ID
      description: Updates a user by their MongoDB ID. Requires admin role.
      security:
        - clerk_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                department:
                  type: string
                designation:
                  type: string
                role:
                  type: string
                  enum: ['staff', 'manager', 'finance', 'admin']
                salary:
                  type: number
                isActive:
                  type: boolean
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request. Invalid ID format or invalid fields.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: User not found.
        '500':
          description: Internal Server Error.
    delete:
      summary: Delete User by ID
      description: Deletes a user by their MongoDB ID. Requires admin role.
      security:
        - clerk_auth: []
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '400':
          description: Bad Request. Invalid ID format.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: User not found.
        '500':
          description: Internal Server Error.
  /config/rates:
    get:
      summary: Get Rate Configurations
      description: Fetches all rate configurations. Requires admin role.
      security:
        - clerk_auth: []
      responses:
        '200':
          description: Rate configurations fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RateConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal Server Error.
    post:
      summary: Create Rate Configuration
      description: Creates a new rate configuration. Requires admin role.
      security:
        - clerk_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateConfigInput'
      responses:
        '201':
          description: Rate configuration created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateConfig'
        '400':
          description: Bad Request. Missing or invalid fields.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict. Rate configuration already exists (if implemented).
        '500':
          description: Internal Server Error.

components:
  securitySchemes:
    clerk_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Clerk uses JWTs
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        clerkId:
          type: string
          description: Clerk user ID
        name:
          type: string
        email:
          type: string
        department:
          type: string
        designation:
          type: string
        role:
          type: string
          enum: ['staff', 'manager', 'finance', 'admin']
        salary:
          type: number
        hourlyRate:
          type: number
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    RateConfig:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        type:
          type: string
          enum: ['mileage', 'overtime_multiplier']
        value:
          type: number
          description: For mileage rate
        condition:
          type: object
          properties:
            dayType:
              type: string
            designation:
              type: string
          description: For overtime multiplier
        multiplier:
          type: number
          description: For overtime multiplier
        effectiveDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    RateConfigInput:
      type: object
      properties:
        type:
          type: string
          enum: ['mileage', 'overtime_multiplier']
        value:
          type: number
          description: For mileage rate
        condition:
          type: object
          properties:
            dayType:
              type: string
            designation:
              type: string
          description: For overtime multiplier
        multiplier:
          type: number
          description: For overtime multiplier
        effectiveDate:
          type: string
          format: date-time
      required:
        - type
        - effectiveDate